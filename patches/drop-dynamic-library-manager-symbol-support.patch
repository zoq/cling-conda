diff --git lib/Interpreter/DynamicLibraryManagerSymbol.cpp lib/Interpreter/DynamicLibraryManagerSymbol.cpp
index fe4b7974..c3f34d4b 100644
--- lib/Interpreter/DynamicLibraryManagerSymbol.cpp
+++ lib/Interpreter/DynamicLibraryManagerSymbol.cpp
@@ -25,7 +25,7 @@
 #include <unordered_set>
 #include <vector>

-#include "llvm/Config/config.h" // Get configuration settings
+#include "llvm/Config/llvm-config.h" // Get configuration settings

 #if defined(HAVE_DLFCN_H) && defined(HAVE_DLOPEN)
 #include <dlfcn.h>
@@ -873,59 +873,7 @@ namespace cling {
   }

   std::string DynamicLibraryManager::getSymbolLocation(void *func) {
-#if defined(__CYGWIN__) && defined(__GNUC__)
     return {};
-#elif defined(LLVM_ON_WIN32)
-    MEMORY_BASIC_INFORMATION mbi;
-    if (!VirtualQuery (func, &mbi, sizeof (mbi)))
-      return {};
-
-    HMODULE hMod = (HMODULE) mbi.AllocationBase;
-    char moduleName[MAX_PATH];
-
-    if (!GetModuleFileNameA (hMod, moduleName, sizeof (moduleName)))
-      return {};
-
-    return getRealPath(moduleName);
-#else
-    // assume we have  defined HAVE_DLFCN_H and HAVE_DLADDR
-    Dl_info info;
-    if (dladdr((void*)func, &info) == 0) {
-      // Not in a known shared library, let's give up
-      return {};
-    } else {
-      if (strchr(info.dli_fname, '/'))
-        return getRealPath(info.dli_fname);
-      // Else absolute path. For all we know that's a binary.
-      // Some people have dictionaries in binaries, this is how we find their
-      // path: (see also https://stackoverflow.com/a/1024937/6182509)
-# if defined(__APPLE__)
-      char buf[PATH_MAX] = { 0 };
-      uint32_t bufsize = sizeof(buf);
-      if (_NSGetExecutablePath(buf, &bufsize) >= 0)
-        return getRealPath(buf);
-      return getRealPath(info.dli_fname);
-# elif defined(LLVM_ON_UNIX)
-      char buf[PATH_MAX] = { 0 };
-      // Cross our fingers that /proc/self/exe exists.
-      if (readlink("/proc/self/exe", buf, sizeof(buf)) > 0)
-        return getRealPath(buf);
-      std::string pipeCmd = std::string("which \"") + info.dli_fname + "\"";
-      FILE* pipe = popen(pipeCmd.c_str(), "r");
-      if (!pipe)
-        return getRealPath(info.dli_fname);
-      std::string result;
-      while (fgets(buf, sizeof(buf), pipe))
-         result += buf;
-
-      pclose(pipe);
-      return getRealPath(result);
-# else
-#  error "Unsupported platform."
-# endif
-      return {};
-   }
-#endif
   }

 } // namespace cling
