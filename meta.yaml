{% set name = "cling" %}
{% set version = "0.6.3" %}
{% set cling_version = "0.6" %}
{% set commit = "464be6e" %}
{% set sha256 = "29f7ab96d27f7f900a5e0e5abd8bc74ebcab7e8ea9bc21d0a35112a5003c4402" %}
{% set build_number = 2 %}
{% set clang_version = [5, 0, 0] %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}-{{ commit }}.tar.gz
  url: https://github.com/root-project/cling/archive/master.tar.gz
  sha256: {{ sha256 }}
  patches:
    - patches/export-all-symbols-on-windows.patch
    - patches/remove-jupyter.patch
    - patches/conda-packaging.patch
    - patches/drop-compile-time-sysroot.patch
    - patches/drop-dynamic-library-manager-symbol-support.patch
    - patches/enable-redefinition-allowed.patch

build:
  number: {{ build_number }}
  skip: True  # [win and vc<14]
  run_exports:
    - {{ pin_subpackage(name, max_pin='x.x') }}

requirements:
  build:
    - cmake
    - ninja  # [win]
    - {{ compiler('cxx') }}
  host:
    - llvmdev {{ clang_version[0] }}
    - clangdev {{ clang_version|join('.') }}
    - clang_variant * cling_v{{ cling_version }}
    - zlib
  run:
    # We really depend on the host compiler at runtime:
    #  - the host compiler STL is one to be used.
    #  - it is used by cling's runtime compatibility check.
    - {{ compiler('cxx') }}  # [linux]
    - clangdev {{ clang_version|join('.') }}
    - clang_variant * cling_v{{ cling_version }}

test:
  commands:
    - test -f $PREFIX/bin/cling  # [unix]
    - if exist %LIBRARY_PREFIX%\\bin\\libcling.dll (exit 0) else (exit 1)  # [win]
    - if exist %LIBRARY_PREFIX%\\lib\\libcling.lib (exit 0) else (exit 1)  # [win]
    - cling '2+3; 0'
    - cling '#include <vector>'

about:
  dev_url: https://github.com/root-project/cling
  doc_url: https://root.cern.ch/cling
  home: https://root.cern.ch/cling
  license: UI/NCSAOSL
  license_family: BSD
  license_file: LICENSE.TXT
  summary: Cling - The Interactive C++ Interpreter
  description: Cling is an interactive C++ interpreter, built on top of Clang and
    LLVM compiler infrastructure. Cling realizes the read-eval-print loop (REPL)
    concept, in order to leverage rapid application development. Implemented as
    a small extension to LLVM and Clang, the interpreter reuses their strengths
    such as the praised concise and expressive compiler diagnostics.

extra:
  recipe-maintainers:
    - zoq 
